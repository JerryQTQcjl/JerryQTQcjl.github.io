<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jerry Chan</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-04-22T05:07:49.668Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Jerry Chan</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring @Validated 失效分析</title>
    <link href="http://example.com/2023/04/22/Spring-Validated-%E5%A4%B1%E6%95%88%E5%88%86%E6%9E%90/"/>
    <id>http://example.com/2023/04/22/Spring-Validated-%E5%A4%B1%E6%95%88%E5%88%86%E6%9E%90/</id>
    <published>2023-04-21T17:41:36.000Z</published>
    <updated>2023-04-22T05:07:49.668Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近在落地 DDD，希望对 command 进行参数校验，由于部分流量入口是 MQ，所以希望在应用层是用 @Validated 进行参数校验，结果。。。</p></blockquote><h3 id="Controller-中使用-Validated"><a href="#Controller-中使用-Validated" class="headerlink" title="Controller 中使用 @Validated"></a>Controller 中使用 @Validated</h3><p>@Validated 注解的作用这里就不多做介绍了，具体用法在网上应该有不少。</p><p>在之前使用 MVC 架构编码时，通常是将 @Validated 注解或者 @Valid 配置在 Controller 的方法中，如下代码所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"common/set"</span>)</span><br><span class="line"><span class="keyword">public</span> Response&lt;?&gt; setCommonSetting(<span class="meta">@RequestBody</span> <span class="meta">@Validated</span> SetCommonSettingReqVO reqVO) &#123;</span><br><span class="line">    <span class="comment">//doSomeThings</span></span><br><span class="line">    <span class="keyword">return</span> Response.success();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以在配置应用层校验时，就想当然的按照类似的写法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addClueTrack</span><span class="params">(@Validated AddClueTrackCommand command)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//doSomeThings</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果可想而知，@Validated 注解并不生效。</p><h3 id="Validated-是怎么生效的？"><a href="#Validated-是怎么生效的？" class="headerlink" title="@Validated 是怎么生效的？"></a>@Validated 是怎么生效的？</h3><p>竟然不生效，那么就开始分析原因。</p><p>首先可以很容易想到，竟然能在方法执行前就拦截进行校验，那么大概率是使用<strong>动态代理</strong>。就和 @Transactional 事务注解一样，底层都是基于 AOP 实现动态代理。</p><p>接下来为了印证这个想法，就是需要深入看看 Spring 实现的。通过 IDE 可以很方便看到有哪些地方引用了 @Validated 注解：</p><img src="/images/95f16571e945fb66855e76053273ccd1.png" alt="截图" style="zoom:100%;" /><p>其中一个类名一下就引起了我的注意 <strong>MethodValidationPostProcessor</strong>，熟悉 Spring 的小伙伴应该知道，Spring 中有很多 BeanPostProcessor 用于扩展 Bean，Aop 便是基于此实现动态代理的。点进去一看，果不其然：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodValidationPostProcessor</span> <span class="keyword">extends</span> <span class="title">AbstractBeanFactoryAwareAdvisingPostProcessor</span></span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">InitializingBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Class&lt;? extends Annotation&gt; validatedAnnotationType = Validated<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="keyword">private</span> Validator validator;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//...</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="comment">//创建切点</span></span><br><span class="line">        Pointcut pointcut = <span class="keyword">new</span> AnnotationMatchingPointcut(<span class="keyword">this</span>.validatedAnnotationType, <span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">this</span>.advisor = <span class="keyword">new</span> DefaultPointcutAdvisor(pointcut, createMethodValidationAdvice(<span class="keyword">this</span>.validator));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Advice <span class="title">createMethodValidationAdvice</span><span class="params">(@Nullable Validator validator)</span> </span>&#123;</span><br><span class="line">      <span class="comment">//创建拦截器</span></span><br><span class="line">        <span class="keyword">return</span> (validator != <span class="keyword">null</span> ? <span class="keyword">new</span> MethodValidationInterceptor(validator) : <span class="keyword">new</span> MethodValidationInterceptor());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnotationMatchingPointcut</span> <span class="keyword">implements</span> <span class="title">Pointcut</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ClassFilter classFilter;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> MethodMatcher methodMatcher;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AnnotationMatchingPointcut</span><span class="params">(Class&lt;? extends Annotation&gt; classAnnotationType, <span class="keyword">boolean</span> checkInherited)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//切点只针对类级别</span></span><br><span class="line">        <span class="keyword">this</span>.classFilter = <span class="keyword">new</span> AnnotationClassFilter(classAnnotationType, checkInherited);</span><br><span class="line">        <span class="keyword">this</span>.methodMatcher = MethodMatcher.TRUE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MethodValidationPostProcessor 中创建了一个切点，过滤类上添加了 @Validated 的 Bean，只要满足此条件，就会根据 MethodValidationInterceptor 生成对应的代理类。嗯，和 @Transactional 的实现原理差不多。</p><p>ok，看到这里我就在应用服务实现上添加了 @Validated 注解，那么此时注解生效了吗？哈哈，进度条还没过半呢😂</p><p>理论上类上加上 @Validated 注解，应该会生成动态代理类的，竟然没成功进行参数校验，我能想到的原因有二：</p><p><strong>1. MethodValidationPostProcessor 没注入到 BeanFactory 中，所以没生成对应的代理类</strong><br><strong>2. MethodValidationInterceptor 对还有其他需要满足的条件，而目前还未满足</strong></p><p>这里先剧透一下，答案是 2 🌝</p><h3 id="MethodValidationInterceptor-需要满足什么条件"><a href="#MethodValidationInterceptor-需要满足什么条件" class="headerlink" title="MethodValidationInterceptor 需要满足什么条件"></a>MethodValidationInterceptor 需要满足什么条件</h3><p>竟然答案是2，那这里就先讲一下 MethodValidationInterceptor，MethodValidationPostProcessor 是怎么注册到容器的咱们后面再来讲。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">ExecutableValidatorpublic <span class="class"><span class="keyword">class</span> <span class="title">MethodValidationInterceptor</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Validator validator;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(MethodInvocation invocation)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Standard Bean Validation 1.1 API</span></span><br><span class="line">        ExecutableValidator execVal = <span class="keyword">this</span>.validator.forExecutables();</span><br><span class="line">        Method methodToValidate = invocation.getMethod();</span><br><span class="line">        Set&lt;ConstraintViolation&lt;Object&gt;&gt; result;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取类本身的实例（非代理类），请记住这里，这里就是和 Controller 最大的区别</span></span><br><span class="line">        Object target = invocation.getThis();</span><br><span class="line">        Assert.state(target != <span class="keyword">null</span>, <span class="string">"Target must not be null"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//执行参数校验，校验的是当前类，也就是说校验的是 Bean 对应的类</span></span><br><span class="line">            result = execVal.validateParameters(target, methodToValidate, invocation.getArguments(), groups);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (IllegalArgumentException ex) &#123;</span><br><span class="line">            <span class="comment">//doSomeThings</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!result.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConstraintViolationException(result);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//执行方法</span></span><br><span class="line">        Object returnValue = invocation.proceed();</span><br><span class="line">        <span class="comment">//校验返回值</span></span><br><span class="line">        result = execVal.validateReturnValue(target, methodToValidate, returnValue, groups);</span><br><span class="line">        <span class="keyword">if</span> (!result.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConstraintViolationException(result);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> returnValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来就要看看 <strong>ExecutableValidator.validateParameters</strong> 这个方法是如何实现的，为了方便阅读，这里我只保留了部分核心代码。<strong>根据包名我们大概也能猜到 ExecutableValidator.validateParameters 是 hibernate-validator 包提供的方法，而 @Validated 注解是由 Spring 提供的，所以不生效也就正常了。</strong>接下来我们继续往下走，我这里只贴部分核心的代码，中间的栈路径可以根据以下这个路径往下走：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  --&gt; org.hibernate.validator.internal.engine.ValidatorImpl#validateParameters  </span></span><br><span class="line"><span class="comment"> *  --&gt; org.hibernate.validator.internal.metadata.BeanMetaDataManager#getBeanMetaData</span></span><br><span class="line"><span class="comment"> *  --&gt; org.hibernate.validator.internal.metadata.BeanMetaDataManagerImpl#createBeanMetaData</span></span><br><span class="line"><span class="comment"> *  --&gt; org.hibernate.validator.internal.metadata.BeanMetaDataManagerImpl#getBeanConfigurationForHierarchy</span></span><br><span class="line"><span class="comment"> *  --&gt; org.hibernate.validator.internal.metadata.provider.MetaDataProvider#getBeanConfiguration</span></span><br><span class="line"><span class="comment"> *  --&gt; org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider#retrieveBeanConfiguration</span></span><br><span class="line"><span class="comment"> *  --&gt; org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider#getFieldMetaData</span></span><br><span class="line"><span class="comment"> *  --&gt; org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider#findPropertyMetaData</span></span><br><span class="line"><span class="comment"> *  --&gt; org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider#findConstraints</span></span><br><span class="line"><span class="comment"> *  --&gt; org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider#findCascadingMetaData</span></span><br><span class="line"><span class="comment"> *  &lt;-- ...</span></span><br><span class="line"><span class="comment"> *  --&gt; org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider#getMethodMetaData</span></span><br><span class="line"><span class="comment"> *  --&gt; org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider#getConstructorMetaData</span></span><br><span class="line"><span class="comment"> *  --&gt; org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider#getClassLevelConstraints</span></span><br><span class="line"><span class="comment"> *  &lt;-- ...</span></span><br><span class="line"><span class="comment"> *  --&gt; org.hibernate.validator.internal.metadata.aggregated.BeanMetaData#hasConstraints</span></span><br><span class="line"><span class="comment"> *  --&gt; org.hibernate.validator.internal.engine.ValidatorImpl#validateParametersInContext</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ValidatorImpl</span> <span class="keyword">implements</span> <span class="title">Validator</span>, <span class="title">ExecutableValidator</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> &lt;T&gt; Set&lt;ConstraintViolation&lt;T&gt;&gt; validateValue(Class&lt;T&gt; beanType, String propertyName, Object value, Class&lt;?&gt;... groups) &#123;</span><br><span class="line">        Contracts.assertNotNull( beanType, MESSAGES.beanTypeCannotBeNull() );</span><br><span class="line">        sanityCheckPropertyPath( propertyName );</span><br><span class="line">        sanityCheckGroups( groups );</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取 bean 及其父类、超类的</span></span><br><span class="line">        BeanMetaData&lt;T&gt; rootBeanMetaData = beanMetaDataManager.getBeanMetaData( beanType );</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断该 bean 是否有约束</span></span><br><span class="line">        <span class="keyword">if</span> ( !rootBeanMetaData.hasConstraints() ) &#123;</span><br><span class="line">            <span class="keyword">return</span> Collections.emptySet();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        PathImpl propertyPath = PathImpl.createPathFromString( propertyName );</span><br><span class="line">        BaseBeanValidationContext&lt;T&gt; validationContext = getValidationContextBuilder().forValidateValue( beanType, rootBeanMetaData, propertyPath );</span><br><span class="line"></span><br><span class="line">        ValidationOrder validationOrder = determineGroupValidationOrder( groups );</span><br><span class="line"></span><br><span class="line">        <span class="comment">//校验参数</span></span><br><span class="line">        <span class="keyword">return</span> validateValueInContext(</span><br><span class="line">                validationContext,</span><br><span class="line">                value,</span><br><span class="line">                propertyPath,</span><br><span class="line">                validationOrder</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我调试到** rootBeanMetaData.hasConstraints()** 时，判断没有约束，然后就直接返回了没有进行参数校验。我就想说看看是如何判断 Bean 是否有约束的，于是就返回上层进入 beanMetaDataManager.getBeanMetaData 中看，结果发现里面的代码有够复杂的🌚</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnotationMetaDataProvider</span> <span class="keyword">implements</span> <span class="title">MetaDataProvider</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//获取类上所有的约束条件</span></span><br><span class="line">  <span class="keyword">private</span> &lt;T&gt; <span class="function">BeanConfiguration&lt;T&gt; <span class="title">retrieveBeanConfiguration</span><span class="params">(Class&lt;T&gt; beanClass)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//获取字段上的约束条件</span></span><br><span class="line">Set&lt;ConstrainedElement&gt; constrainedElements = getFieldMetaData( beanClass );</span><br><span class="line"><span class="comment">//获取方法上的约束条件（包括参数、返回值）</span></span><br><span class="line">constrainedElements.addAll( getMethodMetaData( beanClass ) );</span><br><span class="line"><span class="comment">//获取构造函数</span></span><br><span class="line">constrainedElements.addAll( getConstructorMetaData( beanClass ) );</span><br><span class="line">    <span class="comment">//获取类上的约束条件</span></span><br><span class="line">Set&lt;MetaConstraint&lt;?&gt;&gt; classLevelConstraints = getClassLevelConstraints( beanClass );</span><br><span class="line"><span class="keyword">if</span> ( !classLevelConstraints.isEmpty() ) &#123;</span><br><span class="line">ConstrainedType classLevelMetaData =</span><br><span class="line"><span class="keyword">new</span> ConstrainedType(</span><br><span class="line">ConfigurationSource.ANNOTATION,</span><br><span class="line">beanClass,</span><br><span class="line">classLevelConstraints</span><br><span class="line">);</span><br><span class="line">constrainedElements.add( classLevelMetaData );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> BeanConfiguration&lt;&gt;(</span><br><span class="line">ConfigurationSource.ANNOTATION,</span><br><span class="line">beanClass,</span><br><span class="line">constrainedElements,</span><br><span class="line">getDefaultGroupSequence( beanClass ),</span><br><span class="line">getDefaultGroupSequenceProvider( beanClass )</span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查找约束注解</span></span><br><span class="line"><span class="keyword">protected</span> &lt;A extends Annotation&gt; List&lt;ConstraintDescriptorImpl&lt;?&gt;&gt; findConstraintAnnotations(</span><br><span class="line">Constrainable constrainable,</span><br><span class="line">A annotation,</span><br><span class="line">ConstraintLocationKind type) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果包含 "jdk.internal" and "java" 下的注解，则直接不进行校验</span></span><br><span class="line"><span class="keyword">if</span> ( constraintCreationContext.getConstraintHelper().isJdkAnnotation( annotation.annotationType() ) ) &#123;</span><br><span class="line"><span class="keyword">return</span> Collections.emptyList();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">List&lt;Annotation&gt; constraints = newArrayList();</span><br><span class="line">Class&lt;? extends Annotation&gt; annotationType = annotation.annotationType();</span><br><span class="line"><span class="comment">//判断是否有约束条件，也就我们经常配置的 @NotNull，@Min 这类注解</span></span><br><span class="line"><span class="keyword">if</span> ( constraintCreationContext.getConstraintHelper().isConstraintAnnotation( annotationType ) ) &#123;</span><br><span class="line">constraints.add( annotation );</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这个没用过，暂时跳过</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> ( constraintCreationContext.getConstraintHelper().isMultiValueConstraint( annotationType ) ) &#123;</span><br><span class="line">constraints.addAll( constraintCreationContext.getConstraintHelper().getConstraintsFromMultiValueConstraint( annotation ) );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> constraints.stream()</span><br><span class="line">.map( c -&gt; buildConstraintDescriptor( constrainable, c, type ) )</span><br><span class="line">.collect( Collectors.toList() );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构建级联元数据构造器，也就是我们常用的 @Valid，在 Bean 中如果我们要对对象属性进行校验，</span></span><br><span class="line"><span class="comment">//需要在该属性上添加 @Valid，此处便是如此</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> CascadingMetaDataBuilder <span class="title">getCascadingMetaData</span><span class="params">(JavaBeanAnnotatedElement annotatedElement,</span></span></span><br><span class="line"><span class="function"><span class="params">Map&lt;TypeVariable&lt;?&gt;, CascadingMetaDataBuilder&gt; containerElementTypesCascadingMetaData)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> CascadingMetaDataBuilder.annotatedObject( annotatedElement.getType(), annotatedElement.isAnnotationPresent( Valid<span class="class">.<span class="keyword">class</span> ),</span></span><br><span class="line"><span class="class"><span class="title">containerElementTypesCascadingMetaData</span>, <span class="title">getGroupConversions</span>( <span class="title">annotatedElement</span>.<span class="title">getAnnotatedType</span>() ) )</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>顺着上面的栈路径一直往下走，最终发现最核心的几个方法是 <strong>getFieldMetaData</strong>、<strong>getMethodMetaData</strong>、<strong>getConstructorMetaData</strong>、<strong>getClassLevelConstraints</strong>，这个几方法都是用于获取约束和级联元数据。那么里面到底是怎么获取约束元数据的呢，咱继续往里钻，可以看到最终调用了 <strong>findConstraintAnnotations</strong> 获取约束元数据，也就是我们平时用到的 @NotNull，@Min 等注解，通过 <strong>getCascadingMetaData</strong> 获取级联元数据，也就是 @Valid 注解。看到这，是不是很容易就能想到，知道我加上 @Valid 就能成功校验了呢？</p><p>于是我尝试了一波，果然没问题。嗯~ 长见识了😂。由于时间有限，ValidatorImpl.validateParametersInContext() 方法我就没有深入进去看了。感兴趣的小伙伴可以自行去看看！！🌝</p><h3 id="那么-Controller-为啥直接添加-Validated-或者-Valid-就可以呢？"><a href="#那么-Controller-为啥直接添加-Validated-或者-Valid-就可以呢？" class="headerlink" title="那么 Controller 为啥直接添加 @Validated 或者 @Valid 就可以呢？"></a>那么 Controller 为啥直接添加 @Validated 或者 @Valid 就可以呢？</h3><p>明白了在应用服务实现，准确的说应该是普通 Bean 中应该怎么配置之 @Validated 和 @Valid 使其生效之后，我就很好奇为啥 Controller 只需要单独在方法上配置 @Validated 或者 @Valid 就能成功校验呢？</p><p>还记得上面通过 IDE 查看应用 @Validated 注解的类时，我们发现了 MethodValidationPostProcessor，还有另外几个类一看就很像 Controller 参数解析相关的类：</p><img src="/images/6a453dcb7830c8ba9ebead61cb4942d9.png" alt="截图" style="zoom:100%;" /><p>我在这几个类上各打了一个断点，最终进入的是 AbstractMessageConverterMethodArgumentResolver。</p><p>ok，那就看看他是怎么实现的，这里只贴了很参数校验相关的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractMessageConverterMethodArgumentResolver</span> <span class="keyword">implements</span> <span class="title">HandlerMethodArgumentResolver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">validateIfApplicable</span><span class="params">(WebDataBinder binder, MethodParameter parameter)</span> </span>&#123;</span><br><span class="line">        Annotation[] annotations = parameter.getParameterAnnotations();</span><br><span class="line">        <span class="keyword">for</span> (Annotation ann : annotations) &#123;</span><br><span class="line">          <span class="comment">//获取分组信息</span></span><br><span class="line">            Object[] validationHints = ValidationAnnotationUtils.determineValidationHints(ann);</span><br><span class="line">            <span class="keyword">if</span> (validationHints != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">//进行校验</span></span><br><span class="line">                binder.validate(validationHints);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ValidationAnnotationUtils</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Nullable</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object[] determineValidationHints(Annotation ann) &#123;</span><br><span class="line">        Class&lt;? extends Annotation&gt; annotationType = ann.annotationType();</span><br><span class="line">        String annotationName = annotationType.getName();</span><br><span class="line">        <span class="comment">//如果是 @valid 注解直接返回一个空数组</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"javax.validation.Valid"</span>.equals(annotationName)) &#123;</span><br><span class="line">            <span class="keyword">return</span> EMPTY_OBJECT_ARRAY;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果是 @validated 则返回其分组信息</span></span><br><span class="line">        Validated validatedAnn = AnnotationUtils.getAnnotation(ann, Validated<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">if</span> (validatedAnn != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Object hints = validatedAnn.value();</span><br><span class="line">            <span class="keyword">return</span> convertValidationHints(hints);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (annotationType.getSimpleName().startsWith(<span class="string">"Valid"</span>)) &#123;</span><br><span class="line">            Object hints = AnnotationUtils.getValue(ann);</span><br><span class="line">            <span class="keyword">return</span> convertValidationHints(hints);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataBinder</span> <span class="keyword">implements</span> <span class="title">PropertyEditorRegistry</span>, <span class="title">TypeConverter</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">validate</span><span class="params">(Object... validationHints)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//此处是关键所在，这里获取的是参数！！！和普通的 Bean 获取到的却是 Bean 本身</span></span><br><span class="line">Object target = getTarget();</span><br><span class="line">Assert.state(target != <span class="keyword">null</span>, <span class="string">"No target to validate"</span>);</span><br><span class="line">BindingResult bindingResult = getBindingResult();</span><br><span class="line"><span class="comment">// Call each validator with the same binding result</span></span><br><span class="line"><span class="keyword">for</span> (Validator validator : getValidators()) &#123;</span><br><span class="line"><span class="keyword">if</span> (!ObjectUtils.isEmpty(validationHints) &amp;&amp; validator <span class="keyword">instanceof</span> SmartValidator) &#123;</span><br><span class="line">((SmartValidator) validator).validate(target, bindingResult, validationHints);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (validator != <span class="keyword">null</span>) &#123;</span><br><span class="line">validator.validate(target, bindingResult);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，对于 Controller 不论是直接在参数上加上 @Validated 或者 @Valid 注解，都会进入到校验方法，<strong>而且校验的就是参数！！！而 Bean 校验的却是 Bean 本身！！！</strong></p><h3 id="MethodValidationPostProcessor-和-AbstractMessageConverterMethodArgumentResolver-是怎么被注册到-BeanFactory-的？"><a href="#MethodValidationPostProcessor-和-AbstractMessageConverterMethodArgumentResolver-是怎么被注册到-BeanFactory-的？" class="headerlink" title="MethodValidationPostProcessor 和 AbstractMessageConverterMethodArgumentResolver 是怎么被注册到 BeanFactory 的？"></a>MethodValidationPostProcessor 和 AbstractMessageConverterMethodArgumentResolver 是怎么被注册到 BeanFactory 的？</h3><p>明白了 @Validated 的拦截实现的原理后，那么就只剩最后一个问题了，MethodValidationPostProcessor 和 AbstractMessageConverterMethodArgumentResolver 是怎么被注册到 BeanFactory 的。</p><p>其实不用看源码大概有也能猜到是 Spring Boot 自动装配的。为了印证一下，我还是贴一下源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>(proxyBeanMethods = <span class="keyword">false</span>)</span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(ExecutableValidator<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">ConditionalOnResource</span>(<span class="title">resources</span> </span>= <span class="string">"classpath:META-INF/services/javax.validation.spi.ValidationProvider"</span>)</span><br><span class="line"><span class="meta">@Import</span>(PrimaryDefaultValidatorPostProcessor<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">ValidationAutoConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MethodValidationPostProcessor <span class="title">methodValidationPostProcessor</span><span class="params">(Environment environment,</span></span></span><br><span class="line"><span class="function"><span class="params">            @Lazy Validator validator, ObjectProvider&lt;MethodValidationExcludeFilter&gt; excludeFilters)</span> </span>&#123;</span><br><span class="line">        FilteredMethodValidationPostProcessor processor = <span class="keyword">new</span> FilteredMethodValidationPostProcessor(</span><br><span class="line">                excludeFilters.orderedStream());</span><br><span class="line">        <span class="keyword">boolean</span> proxyTargetClass = environment.getProperty(<span class="string">"spring.aop.proxy-target-class"</span>, Boolean<span class="class">.<span class="keyword">class</span>, <span class="title">true</span>)</span>;</span><br><span class="line">        processor.setProxyTargetClass(proxyTargetClass);</span><br><span class="line">        processor.setValidator(validator);</span><br><span class="line">        <span class="keyword">return</span> processor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外就是 AbstractMessageConverterMethodArgumentResolver 的几个实现类，均由 RequestMappingHandlerAdapter 实例化，而 RequestMappingHandlerAdapter 大家知道有 WebMvcAutoConfiguration 自动装配，时间原因，这就不看了。</p><img src="/images/2848df20caae7fcdd6277d991b9f98d2.png" alt="截图" style="zoom:100%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestMappingHandlerAdapter</span> <span class="keyword">extends</span> <span class="title">AbstractHandlerMethodAdapter</span></span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">BeanFactoryAware</span>, <span class="title">InitializingBean</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">private</span> List&lt;HandlerMethodArgumentResolver&gt; <span class="title">getDefaultArgumentResolvers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;HandlerMethodArgumentResolver&gt; resolvers = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Annotation-based argument resolution</span></span><br><span class="line">        resolvers.add(<span class="keyword">new</span> RequestParamMethodArgumentResolver(getBeanFactory(), <span class="keyword">false</span>));</span><br><span class="line">        resolvers.add(<span class="keyword">new</span> RequestParamMapMethodArgumentResolver());</span><br><span class="line">        resolvers.add(<span class="keyword">new</span> PathVariableMethodArgumentResolver());</span><br><span class="line">        resolvers.add(<span class="keyword">new</span> PathVariableMapMethodArgumentResolver());</span><br><span class="line">        resolvers.add(<span class="keyword">new</span> MatrixVariableMethodArgumentResolver());</span><br><span class="line">        resolvers.add(<span class="keyword">new</span> MatrixVariableMapMethodArgumentResolver());</span><br><span class="line">        resolvers.add(<span class="keyword">new</span> ServletModelAttributeMethodProcessor(<span class="keyword">false</span>));</span><br><span class="line">        resolvers.add(<span class="keyword">new</span> RequestResponseBodyMethodProcessor(getMessageConverters(), <span class="keyword">this</span>.requestResponseBodyAdvice));</span><br><span class="line">        resolvers.add(<span class="keyword">new</span> RequestPartMethodArgumentResolver(getMessageConverters(), <span class="keyword">this</span>.requestResponseBodyAdvice));</span><br><span class="line">        resolvers.add(<span class="keyword">new</span> RequestHeaderMethodArgumentResolver(getBeanFactory()));</span><br><span class="line">        resolvers.add(<span class="keyword">new</span> RequestHeaderMapMethodArgumentResolver());</span><br><span class="line">        resolvers.add(<span class="keyword">new</span> ServletCookieValueMethodArgumentResolver(getBeanFactory()));</span><br><span class="line">        resolvers.add(<span class="keyword">new</span> ExpressionValueMethodArgumentResolver(getBeanFactory()));</span><br><span class="line">        resolvers.add(<span class="keyword">new</span> SessionAttributeMethodArgumentResolver());</span><br><span class="line">        resolvers.add(<span class="keyword">new</span> RequestAttributeMethodArgumentResolver());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Type-based argument resolution</span></span><br><span class="line">        resolvers.add(<span class="keyword">new</span> ServletRequestMethodArgumentResolver());</span><br><span class="line">        resolvers.add(<span class="keyword">new</span> ServletResponseMethodArgumentResolver());</span><br><span class="line">        resolvers.add(<span class="keyword">new</span> HttpEntityMethodProcessor(getMessageConverters(), <span class="keyword">this</span>.requestResponseBodyAdvice));</span><br><span class="line">        resolvers.add(<span class="keyword">new</span> RedirectAttributesMethodArgumentResolver());</span><br><span class="line">        resolvers.add(<span class="keyword">new</span> ModelMethodProcessor());</span><br><span class="line">        resolvers.add(<span class="keyword">new</span> MapMethodProcessor());</span><br><span class="line">        resolvers.add(<span class="keyword">new</span> ErrorsMethodArgumentResolver());</span><br><span class="line">        resolvers.add(<span class="keyword">new</span> SessionStatusMethodArgumentResolver());</span><br><span class="line">        resolvers.add(<span class="keyword">new</span> UriComponentsBuilderMethodArgumentResolver());</span><br><span class="line">        <span class="keyword">if</span> (KotlinDetector.isKotlinPresent()) &#123;</span><br><span class="line">            resolvers.add(<span class="keyword">new</span> ContinuationHandlerMethodArgumentResolver());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Custom arguments</span></span><br><span class="line">        <span class="keyword">if</span> (getCustomArgumentResolvers() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            resolvers.addAll(getCustomArgumentResolvers());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Catch-all</span></span><br><span class="line">        resolvers.add(<span class="keyword">new</span> PrincipalMethodArgumentResolver());</span><br><span class="line">        resolvers.add(<span class="keyword">new</span> RequestParamMethodArgumentResolver(getBeanFactory(), <span class="keyword">true</span>));</span><br><span class="line">        resolvers.add(<span class="keyword">new</span> ServletModelAttributeMethodProcessor(<span class="keyword">true</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> resolvers;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>1、在普通 Bean 中如果要通过注解的方式使用 hibernate-validator 进行校验的话，需要在类上添加 @Validated 注解，同时在方法上添加 @Valid 注解。或者也可以直接使用 @NotNull 等注解。</p><p>2、普通 Bean 使用 @Validated 是通过动态代理完成的。具体的拦截器便是他 MethodValidationInterceptor。</p><p>3、Controller 层之所以能 @Validated 和 @Valid 二选一，是因为校验的是参数本身，而普通 Bean 校验的是 Bean 本身。</p><p>4、至此，相信大家就不会没配置好 @Validated 导致失效了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;最近在落地 DDD，希望对 command 进行参数校验，由于部分流量入口是 MQ，所以希望在应用层是用 @Validated 进行参数校验，结果。。。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;Controller-中使用-Valida</summary>
      
    
    
    
    
    <category term="spring" scheme="http://example.com/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>kafka 消费者高 cpu 问题排查</title>
    <link href="http://example.com/2023/04/14/kafka-%E6%B6%88%E8%B4%B9%E8%80%85%E9%AB%98-cpu-%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/"/>
    <id>http://example.com/2023/04/14/kafka-%E6%B6%88%E8%B4%B9%E8%80%85%E9%AB%98-cpu-%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/</id>
    <published>2023-04-14T15:31:22.000Z</published>
    <updated>2023-04-14T15:48:38.289Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>今天本来打算愉快的划水，运维小哥突然找我说测试环境应用 cpu 一直居高不下，我一看告警还真是…</p></blockquote><h3 id="cpu-高问题排查思路"><a href="#cpu-高问题排查思路" class="headerlink" title="cpu 高问题排查思路"></a>cpu 高问题排查思路</h3><h4 id="首先还是老套路："><a href="#首先还是老套路：" class="headerlink" title="首先还是老套路："></a>首先还是老套路：</h4><ol><li>先查看 cpu 高的线程是哪些</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">top -Hp &lt;pid&gt;</span><br></pre></td></tr></table></figure><img src="/images/9a05c976-5255-48db-918a-2cf6e7f8047d.png" alt="截图" style="zoom:100%"><ol start="2"><li>查看线程的堆栈信息</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//将线程 id 转换为 16 进制</span><br><span class="line"><span class="built_in">printf</span> <span class="string">'%x\n'</span> &lt;tid&gt;</span><br><span class="line"></span><br><span class="line">//获取线程号后 50 行堆栈信息</span><br><span class="line">jstack &lt;pid&gt; | grep &lt;tid&gt; -A 50</span><br></pre></td></tr></table></figure><p>这里我就直接用线程名称去查了。</p><img src="/images/dccda0a5-30a3-443e-a5b7-62ba3f83d12d.png" alt="截图" style="zoom:100%"><p>看堆栈信息定位到是 kafka 消费者消费消息，导致 cpu 居高不下，正常情况下 kafka 消费者 cpu 飚高都是有大量的消息，我第一个感觉就是测试在进行压测，结果一看，打脸了🤔。</p><img src="/images/2ebfeb48-41ce-460f-bd4e-14ef2824b82e.png" alt="截图" style="zoom:100%"><p>可以看到，lag 是 0 或者负数，我又刷新了几次基本上没有多少消息，<strong>这里留个心眼，后面我们在好好唠唠</strong>。</p><p>那么问题就来了，没有消息为啥消费者 cpu 会飚高… 突然灵机一动，会不会是消费者数太多了，导致循环去调用 poll 方法，造成整个节点 cpu 飚高。然后就屁颠屁颠的把所有主题的消费者数调小了，然鹅想想很美好，现实很骨感… 重启后节点的 cpu 依然居高不下。</p><h4 id="遇到不懂就问度娘"><a href="#遇到不懂就问度娘" class="headerlink" title="遇到不懂就问度娘"></a>遇到不懂就问度娘</h4><p>在网上逛了一圈，看到许多相似的场景，各种操作都试了一遍，还是没什么用🙃，kafka 的 github 仓库我也去逛了一圈，发现也有很多 cpu 高得场景，大多数都是建议升级客户端版本，忘了说我司目前用的还是 <strong>0.11.2</strong>，总之逛了一圈没有起到太大的帮助。</p><p>接着就是一波虾皮操作，显示生成了火焰图，看看 consumer poll 到底为啥一直占用 cpu，下面是一张火焰图：</p><img src="/images/6a2a9517-818a-4a3e-a9be-2b5b40dac23e.png" alt="截图" style="zoom:100%"><p>虽然 poll 方法占用 cpu 耗时很长，但是仔细看又觉得没啥问题，是正常的在处理网络请求，这个时候我甚至一度怀疑是 kafka 客户端的 bug 😂。</p><h3 id="有耐心问题迟早能解决"><a href="#有耐心问题迟早能解决" class="headerlink" title="有耐心问题迟早能解决"></a>有耐心问题迟早能解决</h3><p>还记的我们之前提了一嘴那张截图吗，没错就是下面这张</p><img src="/images/2ebfeb48-41ce-460f-bd4e-14ef2824b82e.png" alt="截图" style="zoom:100%"><p>图中 lag 出现负数，其实 lag 出现负数还是很常见的，但问题就出在我排查了这么久图中的 lag 好像没变化过，而且一直是负数，那就很值得注意了。</p><p>我们还是先说说 lag 是怎么计算的</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lag = HW - consumerOffset</span><br></pre></td></tr></table></figure><p><strong>HW: 高水位，通常等于所有 ISR 中最小的 LEO，详细的可以看看<a href="https://www.cnblogs.com/koktlzz/p/14580109.html" target="_blank" rel="noopener">大佬的博客</a></strong></p><p><strong>consumerOffset: 表示消费者提交的消费位移</strong></p><p>那么 lag 为啥会出现负数呢，由于我本身并未看过源码，所以从网上找了一个我认为比较是能说的通的解释:</p><blockquote><p>Producer 的 offset 是通过 JMX 轮询获得的，Consumer 的 offset 是从 kafka 内的 __consumer_offsets 的 topic 中直接读取到的，很明显轮询获取 offset 比 直接从 topic 拿 offset 慢一点，也就可能会出现 Lag 计算后为负数的情况。</p></blockquote><p>OK，回到正题，lag 长时间是负数说明 consumerOffset 一直大于 HW，那么出现这个问题的原因大概率是 HW 一直不更新，因为 HW 只要更新其实 lag 很快就能变回 0。那么 HW 是什么时候更新的呢，<strong>其实是 Follower 副本同步 Leader 副本数据时，Leader 副本会对比 Follower 拉取数据的 offset 和 Leader 自身的 LEO 去更新 HW，所以通常 HW 需要 Follower 多同步一轮才会更新</strong>。</p><p><strong>那么 HW 不更新，只能说明 Follower 没有去同步数据</strong>，想到这，我立马去看了下消费组的副本状态，发现有一个 broker 所有的分区副本都不在 ISR 中。那么基本上确定这个 broker 是出现问题了，但是这和我消费者 cpu 高有什么关系呢？</p><img src="/images/382ce5cb-4dfe-481f-88ca-fc2cd9313431.png" alt="截图" style="zoom:100%"><p>这时运维小哥告诉我，poll 平均每 3ms 就请求一次，导致 cpu 飚高。纳尼？？？我的 poll timeout 明明是 100ms，怎么 3ms 一次呢，这明显有问题呀，运维小哥发了一下抓包的截图给我：</p><img src="/images/16814578551784.png" alt="截图" style="zoom:100%"><p><strong>kafka broker response 中提示 Not Leader For Partition</strong>，这不就和上面的猜想对上了吗，看看 chatgpt 给出的解释:</p><img src="/images/16b2e8bc-06a3-4166-bf25-6815077beb93.png" alt="截图" style="zoom:100%"><p>至此问题就排查了差不多了，那么接下来就是解决。由于是在测试环境发现的，解决方式也很粗暴，就是直接把 topic 直接删除了，然后重新创建。</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ol><li>遇到涉及网络相关的问题，可以抓个包瞧瞧，说不定思路一下就打开了。</li><li>如果实在生产环境遇到这类问题，那么该怎么处理 broker 呢，这个得好好琢磨琢磨，目前思路是从 controller 下手。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;今天本来打算愉快的划水，运维小哥突然找我说测试环境应用 cpu 一直居高不下，我一看告警还真是…&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;cpu-高问题排查思路&quot;&gt;&lt;a href=&quot;#cpu-高问题排查思路&quot; class=&quot;header</summary>
      
    
    
    
    
    <category term="kafka" scheme="http://example.com/tags/kafka/"/>
    
  </entry>
  
  <entry>
    <title>wireshark 抓包 java应用中的 https 请求</title>
    <link href="http://example.com/2023/04/03/wireshark-%E6%8A%93%E5%8C%85-java%E5%BA%94%E7%94%A8%E4%B8%AD%E7%9A%84-https-%E8%AF%B7%E6%B1%82/"/>
    <id>http://example.com/2023/04/03/wireshark-%E6%8A%93%E5%8C%85-java%E5%BA%94%E7%94%A8%E4%B8%AD%E7%9A%84-https-%E8%AF%B7%E6%B1%82/</id>
    <published>2023-04-03T07:08:41.000Z</published>
    <updated>2023-04-03T07:12:39.504Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近生产中请求第三方接口的服务频繁告警，接口响应过慢，我们这边使用的 httpclient 连接池，各项配置看起来都没太大的问题，于是就想着说抓包看看是否有网络层面的问题还是的确是第三方接口慢。</p></blockquote><h2 id="通过-jsslkeylog-获取-sslkeylog"><a href="#通过-jsslkeylog-获取-sslkeylog" class="headerlink" title="通过 jsslkeylog 获取 sslkeylog"></a>通过 <a href="https://github.com/jsslkeylog/jsslkeylog" target="_blank" rel="noopener">jsslkeylog</a> 获取 sslkeylog</h2><h3 id="wireshark-中-https-显示密文的样子"><a href="#wireshark-中-https-显示密文的样子" class="headerlink" title="wireshark 中 https 显示密文的样子"></a>wireshark 中 https 显示密文的样子</h3><p>有用过 wireshark 抓包 https 的大佬应该都知道，https 是有加密的，直接用 wireshark 抓包展示的全都是密文，如下图：<br><img src="/images/9e5440f2db4de1185099e8c1e91edfc.png" alt="截图" style="zoom:100%"><br>可以看到，具体的 https 请求数据都被加密了。</p><h3 id="如何让-https-在-wireshark-显示明文"><a href="#如何让-https-在-wireshark-显示明文" class="headerlink" title="如何让 https 在 wireshark 显示明文"></a>如何让 https 在 wireshark 显示明文</h3><p>wireshark 中解密 https 请求的<a href="https://www.google.com.hk/search?q=wireshark+%E8%A7%A3%E5%AF%86+https&newwindow=1&sxsrf=APwXEdfQwqHE-Fyw3B1hnQNyxby131_KyA:1680505936629&ei=UHwqZJj6Je3f2roPovmx8A4&ved=0ahUKEwiY4pS7lI3-AhXtr1YBHaJ8DO4Q4dUDCA8&uact=5&oq=wireshark+%E8%A7%A3%E5%AF%86+https&gs_lcp=Cgxnd3Mtd2l6LXNlcnAQAzIHCAAQgAQQDDIHCAAQgAQQDDIHCAAQgAQQDDoECCMQJzoFCAAQgAQ6CAgAEAgQBBAeSgQIQRgAUABYowpgtgxoAHABeACAAc4CiAH5DJIBBzAuMS41LjGYAQCgAQHAAQE&sclient=gws-wiz-serp" target="_blank" rel="noopener">方式</a>有多种，这里使用的方式是获取 https 请求时的 sslkeylog，使用到了一个 javaagent 工具 <a href="https://github.com/jsslkeylog/jsslkeylog" target="_blank" rel="noopener">jsslkeylog</a>，通过修改字节码达到发送 https 请求时将使用到的 sslkeylog 写入到本地磁盘的效果。<br>具体流程也很简单：<br>1、下载 jsslkeylog jar 包<br>2、启动命令中加入 -javaagent:/path_to_jar/jSSLKeyLog.jar=/path_to_log/sslkeylog.log<br>3、启动应用发起 https 请求<br>4、之后应该就会在配置的 /path_to_log 中看到对应的 sslkeylog<br><img src="/images/05a6bf5febf9f1b4673920a5d1697bdc.png" alt="截图" style="zoom:100%"><br>5、之后将 log 配置到 wireshark 中，prfferences -&gt; protocols -&gt; tls<br><img src="/images/3b0485a52fcfe450902e8cb06b8b3ca1.png" alt="截图" style="zoom:100%"><br>配置完成之后，就能看到原本的密文已经变成明文了，之后就能愉快的分析了🌝<br><img src="/images/ba3709b43b60602fc22efe0525515d0e.png" alt="截图" style="zoom:100%"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;最近生产中请求第三方接口的服务频繁告警，接口响应过慢，我们这边使用的 httpclient 连接池，各项配置看起来都没太大的问题，于是就想着说抓包看看是否有网络层面的问题还是的确是第三方接口慢。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;</summary>
      
    
    
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
    <category term="计算机网络" scheme="http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>k8s 搭建</title>
    <link href="http://example.com/2023/03/31/k8s-%E6%90%AD%E5%BB%BA/"/>
    <id>http://example.com/2023/03/31/k8s-%E6%90%AD%E5%BB%BA/</id>
    <published>2023-03-31T15:45:37.000Z</published>
    <updated>2023-03-31T15:46:40.276Z</updated>
    
    <content type="html"><![CDATA[<h2 id="k8s搭建"><a href="#k8s搭建" class="headerlink" title="k8s搭建"></a>k8s搭建</h2><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>本文系搭建 kubernetes v1.21.3 版本集群笔记，使用三台虚拟机作为 CentOS7.9 系统测试机，安装 kubeadm、kubelet、kubectl 均使用 yum 安装，网络组件选用的是 flannel。</p><hr><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><p>部署集群没有特殊说明均使用 root 用户执行命令。</p><p>2.1 硬件信息</p><table><thead><tr><th>ip</th><th>hostname</th><th>mem</th><th>disk</th><th>explain</th></tr></thead><tbody><tr><td>192.168.85.2</td><td>192.168.85.2</td><td>2G</td><td>40GB</td><td>k8s 控制平面节点</td></tr><tr><td>192.168.85.3</td><td>192.168.85.3</td><td>2G</td><td>40GB</td><td>k8s 执行节点1</td></tr><tr><td>192.168.85.4</td><td>192.168.85.4</td><td>2G</td><td>40GB</td><td>k8s 执行节点2</td></tr></tbody></table><p>2.2 软件信息</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">software    version</span><br><span class="line">CentOS    CentOS Linux release 7.9.2009 (Core)</span><br><span class="line">Kubernetes    1.21.3</span><br><span class="line">Docker    20.10.8</span><br><span class="line">Kernel    5.4.138-1.el7.elrepo.x86_64</span><br></pre></td></tr></table></figure><p>2.3 禁用 swap<br>swap 仅当内存不够时会使用硬盘块充当额外内存，硬盘的 io 较内存差距极大，禁用 swap 以提高性能各节点均需执行：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">swapoff -a </span><br><span class="line">cp /etc/fstab  /etc/fstab.bak</span><br><span class="line">cat /etc/fstab.bak | grep -v swap &gt; /etc/fstab</span><br></pre></td></tr></table></figure><p>2.4 关闭 SELinux</p><p>关闭 SELinux，否则 kubelet 挂载目录时可能报错 Permission denied，可以设置为 permissive 或 disabled，permissive 会提示 warn 信息各节点均需执行：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">setenforce 0 </span><br><span class="line">sed -i <span class="string">'s/^SELINUX=.*/SELINUX=disabled/'</span> /etc/selinux/config</span><br></pre></td></tr></table></figure><p>2.5 设置时区、同步时间</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">timedatectl <span class="built_in">set</span>-timezone Asia/Shanghai </span><br><span class="line">systemctl <span class="built_in">enable</span> --now chronyd</span><br></pre></td></tr></table></figure><p>查看同步状态：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">timedatectl status</span><br></pre></td></tr></table></figure><p>2.6 关闭防火墙</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld</span><br></pre></td></tr></table></figure><br/><h3 id="安装必要依赖"><a href="#安装必要依赖" class="headerlink" title="安装必要依赖"></a>安装必要依赖</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure><p>3.1 添加 aliyun docker-ce yum 源 </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><p> 重建 yum 缓存 </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum makecache fast</span><br></pre></td></tr></table></figure><p>3.2 安装 Docker</p><p>查看可用 docker 版本 </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum list docker-ce.x86_64 --showduplicates | sort -r</span><br></pre></td></tr></table></figure><p><strong>==安装指定版本 Docker==</strong></p><p>yum install -y docker-ce-20.10.14-3.el7</p><p>这里以安装 20.10.14 版本举例，注意版本号不包含 : 与之前的数字。</p><p>3.3 确保网络模块开机自动加载</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lsmod | grep overlay </span><br><span class="line">lsmod | grep br_netfilter</span><br></pre></td></tr></table></figure><p>若上面命令无返回值输出或提示文件不存在，需执行以下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; /etc/modules-load.d/docker.conf &lt;&lt;EOF </span><br><span class="line">overlay </span><br><span class="line">br_netfilter </span><br><span class="line">EOF</span><br><span class="line">modprobe overlay </span><br><span class="line">modprobe br_netfilter</span><br></pre></td></tr></table></figure><p>3.4 使桥接流量对 iptables 可见<br>各个节点均需执行：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; /etc/sysctl.d/k8s.conf &lt;&lt;EOF </span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="line">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="line">EOF</span><br><span class="line">sysctl --system</span><br></pre></td></tr></table></figure><p>验证是否生效，均返回 1 即正确。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sysctl -n net.bridge.bridge-nf-call-iptables </span><br><span class="line">sysctl -n net.bridge.bridge-nf-call-ip6tables</span><br></pre></td></tr></table></figure><p>3.5 配置 Docker</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir /etc/docker</span><br></pre></td></tr></table></figure><p>修改 cgroup 驱动为 systemd [k8s官方推荐]、限制容器日志量、修改存储类型，最后的 docker 家目录可修改：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; /etc/docker/daemon.json &lt;&lt;EOF</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"exec-opts"</span>: [<span class="string">"native.cgroupdriver=systemd"</span>],</span><br><span class="line">  <span class="string">"log-driver"</span>: <span class="string">"json-file"</span>,</span><br><span class="line">  <span class="string">"log-opts"</span>: &#123;</span><br><span class="line">    <span class="string">"max-size"</span>: <span class="string">"100m"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"storage-driver"</span>: <span class="string">"overlay2"</span>,</span><br><span class="line">  <span class="string">"storage-opts"</span>: [</span><br><span class="line">    <span class="string">"overlay2.override_kernel_check=true"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"registry-mirrors"</span>: [<span class="string">"https://gp8745ui.mirror.aliyuncs.com"</span>],</span><br><span class="line">  <span class="string">"data-root"</span>: <span class="string">"/data/docker"</span></span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>服务脚本第 13 行修改：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim /lib/systemd/system/docker.service</span><br><span class="line">ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock --default-ulimit core=0:0</span><br><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure><p>添加开机自启，立即启动：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> --now docker</span><br></pre></td></tr></table></figure><p>3.6 验证 Docker 是否正常</p><p>查看docker信息，判断是否与配置一致</p><br/><h3 id="部署-Kubernetes-集群"><a href="#部署-Kubernetes-集群" class="headerlink" title="部署 Kubernetes 集群"></a>部署 Kubernetes 集群</h3><p>如未说明，各节点均需执行如下步骤：</p><p>4.1 添加 kubernetes 源</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; /etc/yum.repos.d/kubernetes.repo &lt;&lt;EOF</span><br><span class="line">[kubernetes]</span><br><span class="line">name=Kubernetes</span><br><span class="line">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">repo_gpgcheck=1</span><br><span class="line">gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>重建yum缓存，输入y添加证书认证</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum makecache fast</span><br></pre></td></tr></table></figure><p>4.2 安装 kubeadm、kubelet、kubectl<br>各节点均需安装 kubeadm、kubelet</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">yum list docker-ce.x86_64 --showduplicates | sort -r</span><br><span class="line">version=1.21.3-0</span><br><span class="line">yum install -y kubelet-v1.21.0 kubeadm-v1.21.0 kubectl-v1.21.0</span><br><span class="line"></span><br><span class="line">systemctl <span class="built_in">enable</span> kubelet --now</span><br></pre></td></tr></table></figure><p>4.3 配置自动补全命令</p><p>安装 bash 自动补全插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install bash-completion -y</span><br></pre></td></tr></table></figure><p>设置 kubectl 与 kubeadm 命令补全，下次 login 生效</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl completion bash &gt;/etc/bash_completion.d/kubectl</span><br><span class="line">kubeadm completion bash &gt; /etc/bash_completion.d/kubeadm</span><br></pre></td></tr></table></figure><p>4.4 为 Docker 设定使用的代理服务(暂跳过该步骤，由阿里云镜像解决)<br>Kubeadm 部署 Kubernetes 集群的过程中，默认使用 Google 的 Registry 服务 k8s.gcr.io 上的镜像，例如k8s.grc.io/kube-apiserver 等，但国内无法访问到该服务。必要时，可自行设置合适的代理来获取相关镜像，或者从 Dockerhub 上下载镜像至本地后自行对镜像打标签。</p><p>这里简单说明一下设置代理服务的方法。编辑 /lib/systemd/system/docker.service 文件，在 [Service] 配置段中添加类似如下内容，其中的 PROXY_SERVER_IP 和 PROXY_PORT 要按照实际情况修改。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Environment=<span class="string">"HTTP_PROXY=http://<span class="variable">$PROXY_SERVER_IP</span>:<span class="variable">$PROXY_PORT</span>"</span></span><br><span class="line">Environment=<span class="string">"HTTPS_PROXY=https://<span class="variable">$PROXY_SERVER_IP</span>:<span class="variable">$PROXY_PORT</span>"</span></span><br><span class="line">Environment=<span class="string">"NO_PROXY=192.168.4.0/24"</span></span><br></pre></td></tr></table></figure><p>配置完成后需要重载 systemd，并重新启动 docker 服务：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker.service</span><br></pre></td></tr></table></figure><p>需要特别说明的是，由 kubeadm 部署的 Kubernetes 集群上，集群核心组件 kube-apiserver、kube-controller-manager、kube-scheduler 和 etcd 等均会以静态 Pod 的形式运行，它们所依赖的镜像文件默认来自于 k8s.gcr.io 这一 Registry 服务之上。但我们无法直接访问该服务，常用的解决办法有如下两种，本示例将选择使用更易于使用的前一种方式：</p><p>使用能够到达该服务的代理服务<br>使用国内的镜像服务器上的服务，例如 gcr.azk8s.cn/google_containers 和 registry.aliyuncs.com/google_containers 等（经测试，v1.22.0 版本已停用）<br>4.5 查看指定 k8s 版本需要哪些镜像</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">kubeadm config images list --kubernetes-version v1.21.0</span><br><span class="line"></span><br><span class="line">k8s.gcr.io/kube-apiserver:v1.21.0</span><br><span class="line">k8s.gcr.io/kube-controller-manager:v1.21.0</span><br><span class="line">k8s.gcr.io/kube-scheduler:v1.21.0</span><br><span class="line">k8s.gcr.io/kube-proxy:v1.21.0</span><br><span class="line">k8s.gcr.io/pause:3.4.1</span><br><span class="line">k8s.gcr.io/etcd:3.4.13-0</span><br><span class="line">k8s.gcr.io/coredns/coredns:v1.8.0</span><br></pre></td></tr></table></figure><p>4.6 拉取镜像</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim pullimages.sh</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># pull images</span></span><br><span class="line"> </span><br><span class="line">ver=v1.21.0</span><br><span class="line">registry=registry.cn-hangzhou.aliyuncs.com/google_containers</span><br><span class="line">images=`kubeadm config images list --kubernetes-version=<span class="variable">$ver</span> |awk -F <span class="string">'/'</span> <span class="string">'&#123;print $2&#125;'</span>`</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> image <span class="keyword">in</span> <span class="variable">$images</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$image</span> != coredns ];<span class="keyword">then</span></span><br><span class="line">    docker pull <span class="variable">$&#123;registry&#125;</span>/<span class="variable">$image</span></span><br><span class="line">    <span class="keyword">if</span> [ $? -eq 0 ];<span class="keyword">then</span></span><br><span class="line">        docker tag <span class="variable">$&#123;registry&#125;</span>/<span class="variable">$image</span> k8s.gcr.io/<span class="variable">$image</span></span><br><span class="line">        docker rmi <span class="variable">$&#123;registry&#125;</span>/<span class="variable">$image</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"ERROR: 下载镜像报错，<span class="variable">$image</span>"</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    docker pull coredns/coredns:1.8.0</span><br><span class="line">    docker tag coredns/coredns:1.8.0  k8s.gcr.io/coredns/coredns:v1.8.0</span><br><span class="line">    docker rmi coredns/coredns:1.8.0</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>4.7 修改 kubelet 配置默认 cgroup driver</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mkdir /var/lib/kubelet</span><br><span class="line">cat &gt; /var/lib/kubelet/config.yaml &lt;&lt;EOF</span><br><span class="line">apiVersion: kubelet.config.k8s.io/v1beta1</span><br><span class="line">kind: KubeletConfiguration</span><br><span class="line">cgroupDriver: systemd</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>4.8 初始化 master 节点<br>仅 192.168.85.2 节点需要执行此步骤。</p><p>4.8.1 生成 kubeadm 初始化配置文件<br>[可选] 仅当需自定义初始化配置时用。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubeadm config <span class="built_in">print</span> init-defaults &gt; kubeadm-config.yaml</span><br></pre></td></tr></table></figure><p>修改配置文件：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">localAPIEndpoint:</span><br><span class="line">  advertiseAddress: 1.2.3.4</span><br></pre></td></tr></table></figure><p> 替换为：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">localAPIEndpoint:</span><br><span class="line">  advertiseAddress: 192.168.85.2</span><br><span class="line">  name: 192.168.85.2</span><br><span class="line">kubernetesVersion: 1.21.0</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">networking:</span><br><span class="line">  dnsDomain: cluster.local</span><br><span class="line">  serviceSubnet: 10.96.0.0/12</span><br></pre></td></tr></table></figure><p>替换为：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kubernetesVersion: 1.21.0</span><br><span class="line">networking:</span><br><span class="line">  podSubnet: <span class="string">"10.244.0.0/16"</span></span><br><span class="line">  serviceSubnet: 10.96.0.0/12</span><br></pre></td></tr></table></figure><p>4.8.2 测试环境是否正常</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubeadm init phase preflight</span><br></pre></td></tr></table></figure><p>4.8.3 初始化 master<br>10.244.0.0/16 是 flannel 固定使用的 IP 段，设置取决于网络组件要求。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubeadm init --config=kubeadm-config.yaml --ignore-preflight-errors=2 --upload-certs | tee kubeadm-init.log</span><br></pre></td></tr></table></figure><p>4.8.4 为日常使用集群的用户添加 kubectl 使用权限</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">su - iuskye</span><br><span class="line">mkdir -p <span class="variable">$HOME</span>/.kube</span><br><span class="line">sudo cp -i /etc/kubernetes/admin.conf <span class="variable">$HOME</span>/.kube/admin.conf</span><br><span class="line">sudo chown $(id -u):$(id -g) <span class="variable">$HOME</span>/.kube/admin.conf</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"export KUBECONFIG=<span class="variable">$HOME</span>/.kube/admin.conf"</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure><p>4.8.5 配置 master 认证</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">'export KUBECONFIG=/etc/kubernetes/admin.conf'</span> &gt;&gt; /etc/profile </span><br><span class="line">. /etc/profile</span><br></pre></td></tr></table></figure><p>如果不配置这个，会提示如下输出：The connection to the server localhost:8080 was refused - did you specify the right host or port?<br>此时 master 节点已经初始化成功，但是还未安装网络组件，还无法与其他节点通讯。</p><p>4.8.6 安装网络组件<br>以 flannel 为例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">curl -o kube-flannel.yml https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</span><br><span class="line">kubectl apply -f kube-flannel.yml    <span class="comment"># 这里下载镜像非常慢，我还是先手动拉下来吧，不行就多试几次</span></span><br><span class="line">docker pull quay.io/coreos/flannel:v0.14.0</span><br><span class="line">kubectl apply -f kube-flannel.yml</span><br></pre></td></tr></table></figure><p>4.8.7 查看 192.168.85.2 节点状态</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">kubectl get nodes</span><br><span class="line"></span><br><span class="line">NAME           STATUS   ROLES                  AGE   VERSION</span><br><span class="line">192.168.85.2   Ready    control-plane,master   15d   v1.21.0</span><br><span class="line">192.168.85.3   Ready    &lt;none&gt;                 15d   v1.21.0</span><br><span class="line">192.168.85.4   Ready    &lt;none&gt;                 15d   v1.21.0</span><br></pre></td></tr></table></figure><p>如果 STATUS 提示 NotReady，可以通过 kubectl describe node 192.168.85.2 查看具体的描述信息，性能差的服务器到达 Ready 状态时间会长些。</p><p>4.9 初始化 node 节点并加入集群<br>4.9.1 获取加入 kubernetes 的命令<br>访问 192.168.85.2 输入创建新 token 命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubeadm token create --<span class="built_in">print</span>-join-command</span><br></pre></td></tr></table></figure><p>同时输出加入集群的命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubeadm join 192.168.85.2:6443 --token zukr14.dg1pxt9k9gndzqkl --discovery-token-ca-cert-hash sha256:0b57947ccd86cea8b7af2490fde858f3870e63bf35bbb0a567c702029376e9e5</span><br></pre></td></tr></table></figure><p>这个 token 也可以使用上述 master 上执行的初始化输出结果。</p><p>4.9.2 在 node 节点上执行加入集群的命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubeadm join 192.168.85.2:6443 --token zukr14.dg1pxt9k9gndzqkl --discovery-token-ca-cert-hash sha256:0b57947ccd86cea8b7af2490fde858f3870e63bf35bbb0a567c702029376e9e5</span><br></pre></td></tr></table></figure><p>4.10 查看集群节点状态</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">kubectl get nodes</span><br><span class="line"></span><br><span class="line">NAME           STATUS   ROLES                  AGE   VERSION</span><br><span class="line">192.168.85.2   Ready    control-plane,master   15d   v1.21.0</span><br><span class="line">192.168.85.3   Ready    &lt;none&gt;                 15d   v1.21.0</span><br><span class="line">192.168.85.4   Ready    &lt;none&gt;                 15d   v1.21.0</span><br></pre></td></tr></table></figure><p>4.11 部署 Dashboard<br>4.11.1 部署</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -o recommended.yaml https://raw.githubusercontent.com/kubernetes/dashboard/v2.3.1/aio/deploy/recommended.yaml</span><br></pre></td></tr></table></figure><p>默认 Dashboard 只能集群内部访问，修改 Service 为 NodePort 类型，暴露到外部：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">vi recommended.yaml</span><br><span class="line">kind: Service</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: kubernetes-dashboard</span><br><span class="line">  name: kubernetes-dashboard</span><br><span class="line">  namespace: kubernetes-dashboard</span><br><span class="line">spec:</span><br><span class="line">  ports:</span><br><span class="line">    - port: 443</span><br><span class="line">      targetPort: 8443</span><br><span class="line">      nodePort: 30001</span><br><span class="line">  <span class="built_in">type</span>: NodePort</span><br><span class="line">  selector:</span><br><span class="line">    k8s-app: kubernetes-dashboard</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f recommended.yaml    <span class="comment"># 这里下载镜像非常慢，我还是先手动拉下来吧，不行就多试几次</span></span><br><span class="line">docker pull kubernetesui/dashboard:v2.3.1</span><br><span class="line">docker pull kubernetesui/metrics-scraper:v1.0.6</span><br><span class="line"></span><br><span class="line">kubectl apply -f recommended.yaml</span><br><span class="line"></span><br><span class="line">kubectl get pods,svc -n kubernetes-dashboard</span><br><span class="line">NAME                                             READY   STATUS              RESTARTS   AGE</span><br><span class="line">pod/dashboard-metrics-scraper-856586f554-nb68k   0/1     ContainerCreating   0          52s</span><br><span class="line">pod/kubernetes-dashboard-67484c44f6-shtz7        0/1     ContainerCreating   0          52s</span><br><span class="line">NAME                                TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)         AGE</span><br><span class="line">service/dashboard-metrics-scraper   ClusterIP   10.96.188.208   &lt;none&gt;        8000/TCP        52s</span><br><span class="line">service/kubernetes-dashboard        NodePort    10.97.164.152   &lt;none&gt;        443:30001/TCP   53s</span><br></pre></td></tr></table></figure><p>查看状态正在创建容器中，稍后再次查看：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">NAME                                             READY   STATUS    RESTARTS   AGE</span><br><span class="line">pod/dashboard-metrics-scraper-856586f554-nb68k   1/1     Running   0          2m11s</span><br><span class="line">pod/kubernetes-dashboard-67484c44f6-shtz7        1/1     Running   0          2m11s</span><br><span class="line">NAME                                TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)         AGE</span><br><span class="line">service/dashboard-metrics-scraper   ClusterIP   10.96.188.208   &lt;none&gt;        8000/TCP        2m11s</span><br><span class="line">service/kubernetes-dashboard        NodePort    10.97.164.152   &lt;none&gt;        443:30001/TCP   2m12s</span><br></pre></td></tr></table></figure><p>访问地址：<a href="https://NodeIP:30001；使用">https://NodeIP:30001；使用</a> Firefox 浏览器，Chrome 浏览器打不开不信任 SSL 证书的网站。</p><p>创建 service account 并绑定默认 cluster-admin 管理员集群角色：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubectl create serviceaccount dashboard-admin -n kube-system</span><br><span class="line">kubectl create clusterrolebinding dashboard-admin --clusterrole=cluster-admin --serviceaccount=kube-system:dashboard-admin</span><br><span class="line">kubectl describe secrets -n kube-system $(kubectl -n kube-system get secret | awk <span class="string">'/dashboard-admin/&#123;print $1&#125;'</span>)</span><br></pre></td></tr></table></figure><p>这里需要注意粘贴的时候有可能被换行，如果被换行，可在记事本中设置为一行。</p><p>使用输出的 token 登录 Dashboard。</p><br/><h3 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h3><p>1、dial tcp 10.96.0.1:443: connect: no route to host</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop docker</span><br><span class="line">systemctl stop kubelet</span><br><span class="line">iptables --flush</span><br><span class="line">iptables -tnat --flush</span><br><span class="line">systemctl start kubelet</span><br><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure><p>2、failed to delegate add: failed to set bridge addr: “cni0“ already has an IP address different from 1</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://blog.csdn.net/weixin_42562106/article/details/123749291</span><br></pre></td></tr></table></figure><p>3、failed to add vxlanRoute (10.244.0.0/24 -&gt; 10.244.0.0): network is down</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ip link delete flannel.1</span><br><span class="line">systemctl restart network</span><br><span class="line">kubectl delete -f kube-flannel.yml</span><br><span class="line">kubectl apply -f kube-flannel.yml</span><br></pre></td></tr></table></figure><p>4、Get <a href="http://10.244.0.3:8181/ready" target="_blank" rel="noopener">http://10.244.0.3:8181/ready</a>: dial tcp 10.244.0.3:8181: connect: connection refused</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#重新coredns</span></span><br><span class="line">kubectl -n kube-system rollout restart deployment/coredns</span><br></pre></td></tr></table></figure><p>以上几个问题遇到可以先尝试重启所有的机器，如果不行在通过上述方案解决</p><blockquote><p>参考：<a href="https://">https://www.iuskye.com/2021/08/10/k8s-kubeadm-1213.html</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;k8s搭建&quot;&gt;&lt;a href=&quot;#k8s搭建&quot; class=&quot;headerlink&quot; title=&quot;k8s搭建&quot;&gt;&lt;/a&gt;k8s搭建&lt;/h2&gt;&lt;h3 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说</summary>
      
    
    
    
    
    <category term="运维" scheme="http://example.com/tags/%E8%BF%90%E7%BB%B4/"/>
    
    <category term="k8s" scheme="http://example.com/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>redisson3.15.2 公平锁任务丢失</title>
    <link href="http://example.com/2023/03/31/redisson3.15.2%20%E5%85%AC%E5%B9%B3%E9%94%81%E4%BB%BB%E5%8A%A1%E4%B8%A2%E5%A4%B1/"/>
    <id>http://example.com/2023/03/31/redisson3.15.2%20%E5%85%AC%E5%B9%B3%E9%94%81%E4%BB%BB%E5%8A%A1%E4%B8%A2%E5%A4%B1/</id>
    <published>2023-03-31T15:22:45.000Z</published>
    <updated>2023-03-31T15:37:33.829Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>场景：</p><p>线索流转改成 redisson 公平锁，任务耗时长，导致部分任务丢失。</p></blockquote><h4 id="一、redisson-公平锁实现"><a href="#一、redisson-公平锁实现" class="headerlink" title="一、redisson 公平锁实现"></a><strong>一、redisson 公平锁实现</strong></h4><h5 id="1、redis-中的-K-V"><a href="#1、redis-中的-K-V" class="headerlink" title="1、redis 中的 K/V"></a>1、redis 中的 K/V</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">list:</span> <span class="string">redisson_lock_queue:&#123;test&#125;</span>    </span><br><span class="line"><span class="attr">elem:</span> <span class="string">UUID:threadId</span></span><br><span class="line"><span class="attr">zset:</span> <span class="string">redisson_lock_timeout:&#123;key&#125;</span>   </span><br><span class="line"><span class="attr">elem:</span> <span class="string">UUID:threadId</span>  </span><br><span class="line"><span class="attr">score:</span> <span class="string">timeout</span> <span class="string">=</span> <span class="string">ttl</span> <span class="string">+</span> <span class="string">线程等待时间(5*60000ms)</span> <span class="string">+</span> <span class="string">当前时间戳</span></span><br><span class="line"><span class="attr">hset:</span> <span class="string">key</span> </span><br><span class="line">  <span class="attr">hashKey:</span> <span class="string">UUID:threadId</span> </span><br><span class="line">  <span class="attr">hashVal:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><h5 id="2、上锁流程（这里就不放源码了，感兴趣可以自己看看）"><a href="#2、上锁流程（这里就不放源码了，感兴趣可以自己看看）" class="headerlink" title="2、上锁流程（这里就不放源码了，感兴趣可以自己看看）"></a>2、上锁流程（这里就不放源码了，感兴趣可以自己看看）</h5><blockquote><p>org.redisson.RedissonFairLock#tryLockInnerAsync</p></blockquote><ul><li>清除 redisson_lock_timeout:{key} 中 score 小于当前时间戳的elem，同时清除对应 redisson_lock_queue:{test} 中的 elem</li><li>如果当前没有线程占用锁，则上锁 (ttl = watchdogtimeout)，同时redisson_lock_timeout:{key} 中所有的 score - 线程等待时间(5*60000ms)</li><li>如果存在锁，且是被当前线程占用的，则 hashVal 加一</li><li>如果存在锁，且不是被当前线程占用的，同时已经加入过等待队列，则返回当前线程在队列中的 ttl</li><li>如果存在锁，且不是被当前线程占用的，并且未加入等待队列，则加入等待队列，timeout= ttl + 线程等待时间(5*60000ms) + 当前时间戳，ttl 为队列中最后一个元素的 timeout - current 或者 锁的超时时间</li></ul><h5 id="3、订阅-redisson-lock-channel-fairLock-UUID-threadId"><a href="#3、订阅-redisson-lock-channel-fairLock-UUID-threadId" class="headerlink" title="3、订阅 redisson_lock__channel:{fairLock}:UUID:threadId"></a>3、订阅 redisson_lock__channel:{fairLock}:UUID:threadId</h5><p>此处阻塞线程，直到消息队列中有消息发送为止</p><h5 id="4、解锁流程"><a href="#4、解锁流程" class="headerlink" title="4、解锁流程"></a>4、解锁流程</h5><ul><li>清除 redisson_lock_timeout:{key} 中 score 小于当前时间戳的elem，同时清除对应 redisson_lock_queue:{test}   中的 elem</li><li>判断锁是否存在，如果不存在则说明锁已经被释放了，判断等待队列中是否有elem，有的话取出第一个 publish message</li><li>如果锁存在，且非本线程持有，则直接返回 null</li><li>如果所存在，且是当前线程持有，并且获取所次数大于 1，则 hashVal减一，更新锁超时时间</li><li>如果所存在，且是当前线程持有，释放锁，判断等待队列中是否有elem，有的话取出第一个 publish message</li></ul><h5 id="5、获取到锁之后，取消订阅-redisson-lock-channel-fairLock-UUID-threadId"><a href="#5、获取到锁之后，取消订阅-redisson-lock-channel-fairLock-UUID-threadId" class="headerlink" title="5、获取到锁之后，取消订阅 redisson_lock__channel:{fairLock}:UUID:threadId"></a>5、获取到锁之后，取消订阅 redisson_lock__channel:{fairLock}:UUID:threadId</h5><hr><h4 id="二、问题分析"><a href="#二、问题分析" class="headerlink" title="二、问题分析"></a><strong>二、问题分析</strong></h4><p>1、由于测试环境第三方鉴权接口较慢，每分配一条线索需要3-4s</p><p>2、存量线索有 1500+ 条，每 200 条作为一个任务，总共拆分 8 个任务，每个任务需要执行 200*3 = 600+ s</p><p>3、redisson 公平锁线程等待时间 (5*60000ms)，也就是说单个任务执行完至少会有一个任务过期，在 unlock 或者 lock 操作是会先清除过期任务</p><p>4、由于获取不到锁，线程会订阅 redisson_lock__channel:{fairLock}:UUID:threadId，阻塞知道接收到消息，又由于等待队列里的线程被清了，这个消息队列永远不会收到消息，所以线程一直阻塞，且任务无法执行，资源被占用。</p><p>5、代码模拟：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Config config = <span class="keyword">new</span> Config();</span><br><span class="line">        config.useSingleServer().setAddress(<span class="string">"redis://127.0.0.1:6379"</span>);</span><br><span class="line">        Redisson redissonClient = (Redisson) Redisson.create(config);</span><br><span class="line"></span><br><span class="line">        IntStream.range(<span class="number">0</span>, <span class="number">10</span>).forEach(i -&gt; &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">                <span class="comment">//RedissonFairLock lock = (RedissonFairLock) redissonClient.getFairLock("test");</span></span><br><span class="line">                RedissonFairLock lock = <span class="keyword">new</span> RedissonFairLock(redissonClient.getCommandExecutor(), <span class="string">"test"</span>, <span class="number">2000</span>);</span><br><span class="line">                lock.lock();</span><br><span class="line">                <span class="comment">//最终输出次数小于10</span></span><br><span class="line">                System.out.println(i);</span><br><span class="line">                ThreadUtil.sleep(<span class="number">10000</span>);</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/maybesuch/p/16012674.html" target="_blank" rel="noopener">参考: Redisson分布式锁之公平锁原理</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;场景：&lt;/p&gt;
&lt;p&gt;线索流转改成 redisson 公平锁，任务耗时长，导致部分任务丢失。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;一、redisson-公平锁实现&quot;&gt;&lt;a href=&quot;#一、redisson-公平锁实现&quot; class</summary>
      
    
    
    
    <category term="redisson" scheme="http://example.com/categories/redisson/"/>
    
    
    <category term="redisson" scheme="http://example.com/tags/redisson/"/>
    
    <category term="框架" scheme="http://example.com/tags/%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>apollo 集群架构</title>
    <link href="http://example.com/2023/03/26/apollo-%E9%9B%86%E7%BE%A4%E6%9E%B6%E6%9E%84/"/>
    <id>http://example.com/2023/03/26/apollo-%E9%9B%86%E7%BE%A4%E6%9E%B6%E6%9E%84/</id>
    <published>2023-03-25T18:25:23.000Z</published>
    <updated>2023-03-31T15:44:48.277Z</updated>
    
    <content type="html"><![CDATA[<h1 id="apollo-集群架构"><a href="#apollo-集群架构" class="headerlink" title="apollo 集群架构"></a>apollo 集群架构</h1><h3 id="apollo-组成结构"><a href="#apollo-组成结构" class="headerlink" title="apollo 组成结构"></a>apollo 组成结构</h3><p>apollo 集群主要有三个部分组成，config-service，admin-service，portal</p><ul><li>config-service: 主要为应用客户端提供服务，包括配置的读取、推送等功能，config-service 内置 eureka，已提供 admin-service, portal 的服务发现、服务注册</li><li>admin-service: 主要为 apollo-portal 提供服务，包括应用配置管理、发布等功能</li><li>portal: 是 apollo 提供的服务配置前端页面</li></ul><h3 id="apollo-部署方案"><a href="#apollo-部署方案" class="headerlink" title="apollo 部署方案"></a>apollo 部署方案</h3><p><img src="/images/283b123b3a2d818fb3f732c9a1b75a5d.png" alt="截图" style="zoom:100%" />这个官网提供的高可用双环境架构，更多的架构方案可<a href="https://www.apolloconfig.com/#/zh/deployment/deployment-architecture?id=_34-%e9%ab%98%e5%8f%af%e7%94%a8%ef%bc%8c%e5%a4%9a%e4%b8%aa%e7%8e%af%e5%a2%83" target="_blank" rel="noopener">参考</a></p><h3 id="docker-compose-部署-apollo-集群"><a href="#docker-compose-部署-apollo-集群" class="headerlink" title="docker-compose 部署 apollo 集群"></a>docker-compose 部署 apollo 集群</h3><ol><li>执行 <a href="https://github.com/apolloconfig/apollo-quick-start/tree/master/sql" target="_blank" rel="noopener">sql 脚本</a>，生成 apollo 需要的 db 表</li><li>编写 docker-compose 文件，本次只搭建开发环境模拟单机单环境，config-service，admin-service，portal 都各自部署一个容器</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'2'</span></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">net:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="comment">#开发环境configService，eureka</span></span><br><span class="line">  <span class="attr">apollo-configservice-dev:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">apolloconfig/apollo-configservice</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">configservice-dev</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8080</span><span class="string">:8080</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SPRING_DATASOURCE_URL=jdbc:mysql://192.168.0.103:3306/ApolloConfigDB?characterEncoding=utf8</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SPRING_DATASOURCE_USERNAME=root</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SPRING_DATASOURCE_PASSWORD=123456</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">eureka.instance.ip-address=192.168.0.103</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">net</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">apollo-adminservice-dev:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">apolloconfig/apollo-adminservice</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">adminservice-dev</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8090</span><span class="string">:8090</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SPRING_DATASOURCE_URL=jdbc:mysql://192.168.0.103:3306/ApolloConfigDB?characterEncoding=utf8</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SPRING_DATASOURCE_USERNAME=root</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SPRING_DATASOURCE_PASSWORD=123456</span></span><br><span class="line">      <span class="comment">#这里需要配置开环环境的configService</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">eureka.service.url=http://configservice-dev:8080/eureka/</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">apollo-configservice-dev</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">net</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">apollo-portal:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">apolloconfig/apollo-portal</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">apollo-portal</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8070</span><span class="string">:8070</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SPRING_DATASOURCE_URL=jdbc:mysql://192.168.0.103:3306/ApolloPortalDB?characterEncoding=utf8</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SPRING_DATASOURCE_USERNAME=root</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SPRING_DATASOURCE_PASSWORD=123456</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">spring.profiles.active=auth</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">APOLLO_PORTAL_ENVS=dev,fat,pre,gray,pro</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">DEV_META=http://configservice-dev:8080</span></span><br><span class="line">      <span class="comment"># 以下这些暂时使用开发环境的</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">FAT_META=http://configservice-dev:8080</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">PRE_META=http://configservice-dev:8080</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">GRAY_META=http://configservice-dev:8080</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">PRO_META=http://configservice-dev:8080</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">apollo-adminservice-dev</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">net</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;apollo-集群架构&quot;&gt;&lt;a href=&quot;#apollo-集群架构&quot; class=&quot;headerlink&quot; title=&quot;apollo 集群架构&quot;&gt;&lt;/a&gt;apollo 集群架构&lt;/h1&gt;&lt;h3 id=&quot;apollo-组成结构&quot;&gt;&lt;a href=&quot;#apollo</summary>
      
    
    
    
    
    <category term="apollo" scheme="http://example.com/tags/apollo/"/>
    
    <category term="运维" scheme="http://example.com/tags/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>consul 集群搭建及注意事项</title>
    <link href="http://example.com/2023/03/26/consul-%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA%E5%8F%8A%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/"/>
    <id>http://example.com/2023/03/26/consul-%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA%E5%8F%8A%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</id>
    <published>2023-03-25T17:16:50.000Z</published>
    <updated>2023-03-31T15:45:02.909Z</updated>
    
    <content type="html"><![CDATA[<h3 id="集群搭建"><a href="#集群搭建" class="headerlink" title="集群搭建"></a>集群搭建</h3><p><em>本次利用 docker 搭建 consul 集群，利用 docker-compose 统一管理</em></p><p><em>集群包含三个 server agent: node1、node2、node3</em></p><p><em>集群包含两个 client agent: node4、node5，client agent 提供 ui</em></p><p>**1、下载 docker 镜像 **</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull docker</span><br></pre></td></tr></table></figure><p><strong>2、编辑 docker-compose.yml</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'2'</span></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">byfn:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">consul1:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">consul</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">node1</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">agent</span> <span class="string">-server</span> <span class="string">-bootstrap-expect=3</span> <span class="string">-node=node1</span> <span class="string">-bind=0.0.0.0</span> <span class="string">-client=0.0.0.0</span> <span class="string">-datacenter=dc1</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">byfn</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">consul2:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">consul</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">node2</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">agent</span> <span class="string">-server</span> <span class="string">-retry-join=node1</span> <span class="string">-node=node2</span> <span class="string">-bind=0.0.0.0</span> <span class="string">-client=0.0.0.0</span> <span class="string">-datacenter=dc1</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">consul1</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">byfn</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">consul3:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">consul</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">node3</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">agent</span> <span class="string">-server</span> <span class="string">-retry-join=node1</span> <span class="string">-node=node3</span> <span class="string">-bind=0.0.0.0</span> <span class="string">-client=0.0.0.0</span> <span class="string">-datacenter=dc1</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">consul1</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">byfn</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">consul4:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">consul</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">node4</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">agent</span> <span class="string">-retry-join=node1</span> <span class="string">-node=ndoe4</span> <span class="string">-bind=0.0.0.0</span> <span class="string">-client=0.0.0.0</span> <span class="string">-datacenter=dc1</span> <span class="string">-ui</span> </span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8500</span><span class="string">:8500</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">consul2</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">consul3</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">byfn</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">consul5:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">consul</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">node5</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">agent</span> <span class="string">-retry-join=node1</span> <span class="string">-node=ndoe5</span> <span class="string">-bind=0.0.0.0</span> <span class="string">-client=0.0.0.0</span> <span class="string">-datacenter=dc1</span> <span class="string">-ui</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8501</span><span class="string">:8500</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">consul2</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">consul3</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">byfn</span></span><br></pre></td></tr></table></figure><h3 id="命令行参数"><a href="#命令行参数" class="headerlink" title="命令行参数"></a>命令行参数</h3><p>-server：表示当前使用的 server 模式；如果没有指定，则表示是 client 模式。</p><p>-node：指定当前节点在集群中的名称。</p><p>-config-dir：指定配置文件路径，定义服务的；路径下面的所有 .json 结尾的文件都被访问；缺省值为：/consul/config。</p><p>-data-dir： consul 存储数据的目录；缺省值为：/consul/data。</p><p>-datacenter：数据中心名称，缺省值为 dc1。</p><p>-ui：使用 consul 自带的 web UI 界面 。</p><p>-join：加入到已有的集群中。</p><p>-retry-join：与 -join 类似，但允许重试连接，直到连接成功。一旦成功加入成员列表中的成员，它将永远不会尝试再次加入。然后，代理商将仅通过八卦维持其会员资格。允许配置多个 -retry-join，然后节点会按照顺序加入和重试，直到第一个成功。</p><p>-enable-script-checks： 检查服务是否处于活动状态，类似开启心跳。</p><p>-advertise：通告地址用于更改我们向集群中其他节点通告的地址。相当于 -bind 不可用时更改 -bind 地址，可以理解为 -bind 的一个备选方案。</p><p>-bind： 绑定服务器的 ip 地址，缺省值：“0.0.0.0”，这意味着 consul 将绑定到本地机器上的所有地址，并将私有 IPv4 地址通告给集群的其余节点，如果有多个私有 IPv4 地址可用，consul 将在启动时退出并报错。consul 1.1.0 之后，可以结合 go-sockaddr template使用，例如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ consul agent -bind &#39;&#123;&#123; GetPrivateInterfaces | include &quot;network&quot; &quot;10.0.0.0&#x2F;8&quot; | attr &quot;address&quot; &#125;&#125;&#39;</span><br></pre></td></tr></table></figure><p>-client：客户端可访问 ip，缺省值为：“127.0.0.1”，即仅允许环回连接。</p><p>-bootstrap-expect：在一个 datacenter 中期望的 server 节点数目，consul 启动时会一直等待直到达到这个数目的server才会引导整个集群。这个参数的值在同一个 datacenter 的所有server节点上必须保持一致。</p><p>-bootstrap：用来控制一个 server 是否运行在 bootstrap 模式：当一个 server 处于 bootstrap 模式时，它可以选举自己为 leader；注意在一个 datacenter 中只能有一个 server 处于 bootstrap 模式。所以这个参数一般只能用在只有一个 server 的开发环境中，在有多个 server 的 cluster 产品环境中，不能使用这个参数，否则如果多个 server 都标记自己为 leader 那么会导致数据不一致。另外该标记不能和 -bootstrap-expect 同时指定。</p><h3 id="服务注册"><a href="#服务注册" class="headerlink" title="服务注册"></a>服务注册</h3><p><strong>1、通过 config-file 注册服务</strong>，编辑 xxx.json，然后放在 /consul/config 目录下（默认情况）,当然也可以通过 <a href="https://www.consul.io/commands/config/write" target="_blank" rel="noopener">consul 命令行</a>加载配置。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;                                                                                                                                                   </span><br><span class="line">  <span class="attr">"services"</span>: [                                                                                                                                     </span><br><span class="line">    &#123;                                                                                                                                               </span><br><span class="line">      <span class="attr">"id"</span>: <span class="string">"hertz-demo-001"</span>,                                                                                                                       </span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"hertz-demo"</span>,                                                                                                                         </span><br><span class="line">      <span class="attr">"tags"</span>: [                                                                                                                                     </span><br><span class="line">      ],                                                                                                                                            </span><br><span class="line">      <span class="attr">"address"</span>: <span class="string">"192.168.0.103"</span>,                                                                                                                       </span><br><span class="line">      <span class="attr">"port"</span>: <span class="number">5000</span>,                                                                                                                                 </span><br><span class="line">      <span class="attr">"checks"</span>: [                                                                                                                                   </span><br><span class="line">        &#123;                                                                                                                                           </span><br><span class="line">        <span class="attr">"http"</span>: <span class="string">"http://192.168.0.103:5000/ping"</span>,                                                                                                       </span><br><span class="line">        <span class="attr">"tlsSkipVerify"</span>: <span class="literal">false</span>,                                                                                                                   </span><br><span class="line">        <span class="attr">"method"</span>: <span class="string">"GET"</span>,                                                                                                                            </span><br><span class="line">        <span class="attr">"interval"</span>: <span class="string">"10s"</span>,                                                                                                                          </span><br><span class="line">        <span class="attr">"timeout"</span>: <span class="string">"1s"</span>,                                                                                                                             </span><br><span class="line">        <span class="attr">"deregisterCriticalServiceAfter"</span>: <span class="string">"30s"</span></span><br><span class="line">        &#125;                                                                                                                                           </span><br><span class="line">      ]                                                                                                                                             </span><br><span class="line">    &#125;                                                                                                                                               </span><br><span class="line">  ]                                                                                                                                                 </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2、执行 consul 命令重载配置文件</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">consul reload</span><br></pre></td></tr></table></figure><p><strong>3、启动 web 服务</strong>，这里使用自己熟悉的语言写一个简单的服务即可，这里用的是 go http 框架 hertz:</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"context"</span></span><br><span class="line"><span class="string">"github.com/cloudwego/hertz/pkg/app"</span></span><br><span class="line"><span class="string">"github.com/cloudwego/hertz/pkg/app/server"</span></span><br><span class="line"><span class="string">"github.com/cloudwego/hertz/pkg/common/utils"</span></span><br><span class="line"><span class="string">"github.com/cloudwego/hertz/pkg/protocol/consts"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s := server.Default(</span><br><span class="line">server.WithHostPorts(<span class="string">"192.168.0.103:5000"</span>),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">s.GET(<span class="string">"/ping"</span>, <span class="function"><span class="keyword">func</span><span class="params">(ctx context.Context, req *app.RequestContext)</span></span> &#123;</span><br><span class="line">log.Print(req.ClientIP(), <span class="string">" ping"</span>)</span><br><span class="line">req.JSON(consts.StatusOK, utils.H&#123;<span class="string">"ping"</span>: <span class="string">"pong"</span>&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">s.Spin()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>4、查看服务健康信息</strong>，passing 参数表示是否过滤不健康的服务</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http://127.0.0.1:8500/v1/health/service/hertz-demo\?passing\=<span class="literal">true</span></span><br></pre></td></tr></table></figure><p><strong>5、注销服务</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl --request PUT 127.0.0.1:8501/v1/agent/service/deregister/hertz-demo-001</span><br></pre></td></tr></table></figure><p><strong>6、consul ui 界面上显示如下：</strong></p><img src="/images/15a776f6a2dd3e8cd4405101c5e47f9c.png" alt="截图" style="zoom:0%" /><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>1、注册服务时，check 参数 method GET 注意 GET 需要大写，否则健康检查会失败</p><p>2、服务注册的 client agent 挂了，那么 consul 会认为服务也挂了，并不会做故障转移，也不会同步原本 client agent 下的服务信息</p><p>3、服务注册需要确保网络能联通</p><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><p><strong>1、官方推荐的架构方式</strong></p><p>官方建议一个集群部署 3-5 个 server agent，每个服务的服务器部署一个 client agent，如下如所示：</p><img src="/images/d54b9c5750f98deb333af08e95cd8c74.png" alt="截图" style="zoom:100%;" /><p><strong>2、如是想要统一管理 consul agent</strong>，那可以参考另一种架构方式：</p><img src="/images/46d62fa92deb1760cdec0d06f983dd1d.png" alt="截图" style="zoom:100%" /><br/><br/><blockquote><p>参考：<br><a href="https://mp.weixin.qq.com/s/ecmqqWuMho2a0xhaF1vFNA" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/ecmqqWuMho2a0xhaF1vFNA</a><br><a href="https://www.cnblogs.com/brady-wang/p/14440649.html/" target="_blank" rel="noopener">https://www.cnblogs.com/brady-wang/p/14440649.html</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;集群搭建&quot;&gt;&lt;a href=&quot;#集群搭建&quot; class=&quot;headerlink&quot; title=&quot;集群搭建&quot;&gt;&lt;/a&gt;集群搭建&lt;/h3&gt;&lt;p&gt;&lt;em&gt;本次利用 docker 搭建 consul 集群，利用 docker-compose 统一管理&lt;/em&gt;&lt;/p&gt;
&lt;</summary>
      
    
    
    
    
    <category term="consul" scheme="http://example.com/tags/consul/"/>
    
    <category term="运维" scheme="http://example.com/tags/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2023/03/26/hello-world/"/>
    <id>http://example.com/2023/03/26/hello-world/</id>
    <published>2023-03-25T16:04:15.447Z</published>
    <updated>2023-03-25T16:04:15.447Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
